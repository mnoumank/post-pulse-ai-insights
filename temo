import React, { useState } from 'react';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { RefreshCw, Sparkles, Hash } from 'lucide-react';
import { toast } from 'sonner';
import { AIPostMetrics } from '@/utils/aiAnalyzer';

interface PostEditorProps {
  postNumber: 1 | 2;
  content: string;
  onChange: (content: string) => void;
  metrics: AIPostMetrics | null;
  isWinner?: boolean;
}


//should stay 
type SuggestionKey =
  | 'hook'
  | 'question'
  | 'cta'
  | 'hashtags'
  | 'whitespace'
  | 'emojis'
  | 'readability'
  | 'passive';



interface ContentAnalysis {
  missing: Record<SuggestionKey, boolean>;
  suggestions: Suggestion[];
  recommendedCta: string;
  hashtags: string[];
  readabilityScore: number;
}

interface Suggestion {
  key: SuggestionKey;
  title: string;
  description: string;
  examples: string[];
  benefits: string;
  Icon: React.ComponentType<any>;
}


const SUGGESTION_CONFIG: Record<SuggestionKey, Suggestion> = {
  hook: {
    key: 'hook',
    title: "Attention-Grabbing Hook",
    description: "The first lines should spark curiosity or emotion.",
    examples: HOOK_OPTIONS.slice(0, 3),
    benefits: "Hooks boost initial engagement by up to 5×",
    Icon: Megaphone
  },
  question: {
    key: 'question',
    title: "Engagement Question",
    description: "Questions invite comments and discussions.",
    examples: ["What's your experience?", "How would you handle this?"],
    benefits: "Posts with questions get 2–3× more comments",
    Icon: HelpCircle
  },
  cta: {
    key: 'cta',
    title: "Call-to-Action",
    description: "A clear CTA tells readers what to do next.",
    examples: CTA_OPTIONS.slice(0, 3),
    benefits: "CTAs increase engagement by 30–50%",
    Icon: Tags
  },
  hashtags: {
    key: 'hashtags',
    title: "Relevant Hashtags",
    description: "Hashtags help new audiences discover you.",
    examples: ["#Leadership #CareerGrowth", "#TechInnovation"],
    benefits: "3–5 hashtags can double your reach",
    Icon: Hash
  },
  whitespace: {
    key: 'whitespace',
    title: "Proper Spacing",
    description: "Spacing improves mobile readability.",
    examples: ["Short paragraphs with blank lines"],
    benefits: "Well-spaced posts retain 25% more readers",
    Icon: Type
  },
  emojis: {
    key: 'emojis',
    title: "Strategic Emojis",
    description: "Emojis add visual interest and convey tone.",
    examples: ["🚀 for launches", "💡 for insights"],
    benefits: "Emojis boost engagement by 15–20%",
    Icon: Smile
  },
  readability: {
    key: 'readability',
    title: "Simplify Sentences",
    description: "Shorter sentences improve clarity.",
    examples: ["Split long sentences at commas"],
    benefits: "Simpler text holds reader attention better",
    Icon: Sparkles
  },
  passive: {
    key: 'passive',
    title: "Active Voice",
    description: "Active voice strengthens your message.",
    examples: ["We developed (not 'was developed')"],
    benefits: "Active voice drives stronger engagement",
    Icon: Megaphone
  }
};



const samplePosts = [
  "🚀 Excited to announce our new product launch! After months of hard work, our team has created something truly innovative. #ProductLaunch #Innovation\n\nWhat features would you like to see in our next update?",
  "I've been reflecting on leadership lessons I've learned in my career:\n\n1. Listen more than you speak\n2. Empower your team to make decisions\n3. Celebrate small wins along the way\n4. Be transparent, especially during challenges\n\nWhat's your most valuable leadership lesson? Comment below 👇 #Leadership #CareerAdvice",
  "Today marks 5 years at Company X! 🎉\n\nLooking back, I'm grateful for:\n- The amazing colleagues who became friends\n- Challenging projects that helped me grow\n- The supportive environment that encourages innovation\n\nExcited for what the future holds! #WorkAnniversary #CareerGrowth",
];

// 3. Expanded CTA Options
const CTA_OPTIONS = [
  "👇 Drop your thoughts below",
  "➡️ Tag someone who would benefit",
  "🔖 Save for later",
  "✍️ Share your experience",
  "💬 Like & share to help others",
  "📢 Spread the word by sharing",
  "🔗 Feel free to share this post",
  "👍 Hit like if this resonates",
  "🗣️ Let’s discuss in the comments",
  "📲 Share with your network",
  "🤝 Invite a friend to weigh in",
  "🎯 What’s your top takeaway?",
  "❓ Any questions? Ask below",
  "📌 Bookmark this for reference",
  "💡 Got ideas? Drop them below",
  // NEW ADDITIONS:
  "🚀 Which point resonates most? Comment!",
  "👀 Who needs to see this? Tag them!",
  "📈 Want more tips like this? Follow →",
  "🤔 Agree or disagree? Tell me why!",
  "🌱 Found this helpful? Repost ♻️",
  "🔄 Share with your team!",
  "💭 How would you apply this?",
  "📥 DM me for the full guide",
  "🏷️ Know someone struggling with this? Tag them!",
  "📝 What would you add to this list?",
  "⏳ Will you try this today? Say yes below!",
  "🎁 Bonus tip in the comments ↓",
  "📚 Want the full framework? Comment 'Guide'",
  "🧠 How do you approach this?",
  "💥 First time hearing this?",
  "🛠️ Which strategy will you use first?",
  "🤯 Did this change your perspective?",
  "👋 New here? Connect with me!",
  "📣 Help me reach [X] likes!",
  "⚡ Quick favor: share with 1 friend",
  "🏆 Which tip was most valuable?",
  "🔔 Turn on notifications for more!",
  "💌 DM me your biggest challenge"
];

const EMOJI_MAP: Record<string, string[]> = {
  announcement: ['🚀', '📢', '✨', '🎊', '📣', '🔔', '🌟', '⚡', '🆕', '🎯'],
  idea:         ['💡', '🧠', '🌟', '🔍', '💭', '🎨', '🤯', '💎', '🛠️', '💫'],
  growth:       ['📈', '🌱', '💹', '🚀', '🔼', '📊', '🪴', '🌳', '🧗', '🏔️'],
  challenge:    ['💪', '🧗', '🦾', '🏋️', '⚔️', '🥊', '🛡️', '🧩', '🏃', '⛰️'],
  question:     ['🤔', '❓', '🧐', '⁉️', '❔', '🔎', '👀', '💬', '🗨️', '🤷'],
  gratitude:    ['🙏', '❤️', '😊', '🤗', '🥰', '💝', '🎁', '🫂', '🌺', '☀️'],
  team:         ['👥', '🤝', '🫂', '👫', '👬', '👭', '🤜🤛', '🤲', '🧑‍🤝‍🧑', '🏘️'],
  future:       ['🔮', '⌛', '🔭', '🚧', '🛸', '🧭', '⏳', '🕰️', '🗓️', '🔜'],
  important:    ['🔑', '❗', '⚠️', '‼️', '🚨', '⛔', '🔴', '🔔', '🔎', '💢'],
  celebration:  ['🎉', '🥳', '🏆', '🎊', '🎁', '🏅', '🎖️', '🍾', '🥂', '🪅'],
  learning:     ['📚', '🎓', '🧠', '📖', '✏️', '📝', '📘', '📙', '📒', '🖋️'],
  tech:         ['💻', '📱', '🔌', '🖥️', '⌨️', '🖱️', '📡', '🛰️', '🤖', '👾'],
  business:     ['💼', '📊', '📑', '📌', '🏢', '🏭', '🛒', '💰', '💳', '💵'],
  motivation:   ['🔥', '⚡', '💯', '🏆', '🚀', '🎯', '💥', '👊', '🦾', '💪'],
  productivity: ['⏱️', '🕒', '✅', '📅', '🗓️', '📋', '✂️', '📎', '📌', '🖇️'],
  creativity:   ['🎨', '🖌️', '🖍️', '✏️', '📝', '📐', '🎭', '🎬', '🎤', '🎼'],
  default:      ['👋', '💬', '📝', '🔹', '▪️', '🔘', '🔵', '⚫', '🔳', '🔷']
};


const HASHTAG_CATEGORIES = {
  leadership: [
    '#leadership','#management','#teamwork','#coaching','#mentoring',
    '#vision','#strategy','#inspiration','#empowerment','#executive'
  ],
  career: [
    '#career','#careeradvice','#careerdevelopment','#jobsearch','#hiring',
    '#resume','#interview','#promotion','#success','#professional'
  ],
  business: [
    '#business','#entrepreneurship','#startups','#innovation','#strategy',
    '#growth','#finance','#marketing','#leadership','#scale'
  ],
  technology: [
    '#technology','#tech','#AI','#machinelearning','#software',
    '#cloud','#automation','#IoT','#cybersecurity','#bigdata'
  ],
  marketing: [
    '#marketing','#digitalmarketing','#socialmedia','#branding','#contentmarketing',
    '#SEO','#advertising','#campaign','#growthhacking','#inboundmarketing'
  ],
  productivity: [
    '#productivity','#timemanagement','#efficiency','#goals','#focus',
    '#workflow','#habits','#motivation','#mindset','#organization'
  ],
  networking: [
    '#networking','#connections','#community','#collaboration','#events',
    '#LinkedIn','#partnerships','#referrals','#socialnetworking','#relationships'
  ],
  learning: [
    '#learning','#growth','#education','#skills','#training',
    '#elearning','#development','#knowledge','#mindset','#continuouslearning'
  ],
  industry: [
    '#industry','#trends','#insights','#analysis','#expertise',
    '#sector','#innovation','#research','#forecast','#professional'
  ]
  };

const getRelevantHashtags = (content: string, maxHashtags: number = 4) => {
  const text = content.toLowerCase();
  let relevantTags = new Set<string>();
  
  const keywordMap = {
    'lead': 'leadership',
    'team': 'leadership',
    'manage': 'leadership',
    'motivat': 'leadership',
    
    'career': 'career',
    'job': 'career',
    'hiring': 'career',
    'interview': 'career',
    
    'business': 'business',
    'startup': 'business',
    'entrepreneur': 'business',
    'company': 'business',
    
    'tech': 'technology',
    'ai': 'technology',
    'digital': 'technology',
    'software': 'technology',
    
    'market': 'marketing',
    'brand': 'marketing',
    'content': 'marketing',
    'social media': 'marketing',
    
    'productiv': 'productivity',
    'goal': 'productivity',
    'success': 'productivity',
    'achieve': 'productivity',
    
    'network': 'networking',
    'connect': 'networking',
    'communit': 'networking',
    
    'learn': 'learning',
    'develop': 'learning',
    'grow': 'learning',
    'skill': 'learning'
  };

  const matchedCategories = new Set<string>();
  for (const [keyword, category] of Object.entries(keywordMap)) {
    if (text.includes(keyword)) {
      matchedCategories.add(category);
    }
  }
  
  if (matchedCategories.size === 0) {
    matchedCategories.add('networking');
    matchedCategories.add('professional');
  }
  
  for (const category of matchedCategories) {
    const categoryTags = HASHTAG_CATEGORIES[category];
    if (categoryTags) {
      const numToAdd = Math.min(2, Math.ceil(maxHashtags / matchedCategories.size));
      const shuffled = [...categoryTags].sort(() => 0.5 - Math.random());
      shuffled.slice(0, numToAdd).forEach(tag => relevantTags.add(tag));
    }
  }
  
  relevantTags.add('#linkedin');
  
  return Array.from(relevantTags).slice(0, maxHashtags);
};

export function PostEditor({ postNumber, content, onChange, metrics, isWinner }: PostEditorProps) {
  const [showPlaceholder, setShowPlaceholder] = useState(!content);

  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    onChange(e.target.value);
    setShowPlaceholder(e.target.value.length === 0);
  };

  const insertSample = () => {
    let randomIndex;
    do {
      randomIndex = Math.floor(Math.random() * samplePosts.length);
    } while (content === samplePosts[randomIndex] && samplePosts.length > 1);
    
    onChange(samplePosts[randomIndex]);
    setShowPlaceholder(false);
  };

  const cleanupText = () => {
    if (!content.trim()) {
      toast("No content to clean up", {
        description: "Please add some text first"
      });
      return;
    }

    let cleanedText = content.split('\n').map((line, i) => {
      if (line.trim() && !line.match(/^[👋🎯💡🔑✨🚀📈💪]/)) {
        const emojis = ['👋', '🎯', '💡', '🔑', '✨', '🚀', '📈', '💪'];
        return `${emojis[i % emojis.length]} ${line}`;
      }
      return line;
    }).join('\n');

    cleanedText = cleanedText.replace(/^- /gm, '• ');

    cleanedText = cleanedText.replace(/#\w+/g, '').trim();

    const relevantHashtags = getRelevantHashtags(cleanedText);
    cleanedText += '\n\n' + relevantHashtags.join(' ');

    if (!cleanedText.toLowerCase().includes('thoughts?') && 
        !cleanedText.toLowerCase().includes('agree?') &&
        !cleanedText.includes('?')) {
      cleanedText += '\n\nWhat are your thoughts? 🤔';
    }

    cleanedText = cleanedText.replace(/([.!?])\s+/g, '$1\n\n');

    onChange(cleanedText);
    toast("Text cleaned up!", {
      description: "Added structure, emojis, and relevant hashtags"
    });
  };

  const addRecommendedHashtags = () => {
    if (!metrics?.recommendedHashtags?.length) {
      toast("No AI-recommended hashtags available", {
        description: "Enable AI analysis to get hashtag recommendations"
      });
      return;
    }

    let updatedContent = content.replace(/#\w+/g, '').trim();
    updatedContent += '\n\n' + metrics.recommendedHashtags.join(' ');
    onChange(updatedContent);
    
    toast("Hashtags added!", {
      description: "Added AI-recommended hashtags to your post"
    });
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'bg-green-500';
    if (score >= 60) return 'bg-green-400';
    if (score >= 40) return 'bg-yellow-400';
    return 'bg-red-400';
  };

  return (
    <Card className={`w-full ${isWinner ? 'border-2 border-green-500' : ''}`}>
      <CardHeader className="pb-3">
        <div className="flex justify-between items-center">
          <CardTitle className="text-xl flex items-center">
            Post {postNumber} {isWinner && <Badge className="ml-2 bg-green-500">Winner</Badge>}
            {metrics?.isAIEnhanced && (
              <Badge variant="outline" className="ml-2 flex items-center">
                <Sparkles className="h-3 w-3 mr-1 text-blue-500" />
                AI Enhanced
              </Badge>
            )}
          </CardTitle>
          <div className="flex gap-2">
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={insertSample} 
              className="h-8 text-xs"
            >
              <RefreshCw className="h-3.5 w-3.5 mr-1" />
              Sample
            </Button>
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={cleanupText} 
              className="h-8 text-xs"
            >
              <Sparkles className="h-3.5 w-3.5 mr-1" />
              Clean up
            </Button>
          </div>
        </div>
        {metrics && (
          <div className="flex gap-2 mt-2">
            <Badge variant="outline" className="text-xs">
              Engagement: <span className={`ml-1 px-1.5 rounded-sm text-white ${getScoreColor(metrics.engagementScore)}`}>{metrics.engagementScore}</span>
            </Badge>
            <Badge variant="outline" className="text-xs">
              Reach: <span className={`ml-1 px-1.5 rounded-sm text-white ${getScoreColor(metrics.reachScore)}`}>{metrics.reachScore}</span>
            </Badge>
            <Badge variant="outline" className="text-xs">
              Virality: <span className={`ml-1 px-1.5 rounded-sm text-white ${getScoreColor(metrics.viralityScore)}`}>{metrics.viralityScore}</span>
            </Badge>
          </div>
        )}
      </CardHeader>
      <CardContent>
        <div className="relative">
          <Textarea
            value={content}
            onChange={handleChange}
            placeholder=""
            className="min-h-[240px] resize-y font-sans text-base leading-relaxed p-4"
          />
          {showPlaceholder && (
            <div className="absolute top-0 left-0 p-4 text-gray-400 pointer-events-none">
              Type your LinkedIn post here...
            </div>
          )}
        </div>
      </CardContent>
      {metrics?.recommendedHashtags?.length > 0 && (
        <CardFooter className="flex-col items-start pt-0">
          <div className="flex items-center mb-2">
            <Hash className="h-4 w-4 mr-1 text-blue-500" />
            <span className="text-sm font-medium">AI Recommended Hashtags:</span>
            <Button 
              variant="link" 
              size="sm" 
              onClick={addRecommendedHashtags} 
              className="text-xs ml-2 h-6 p-0"
            >
              Add to post
            </Button>
          </div>
          <div className="flex flex-wrap gap-2">
            {metrics.recommendedHashtags.map((tag, i) => (
              <Badge key={i} variant="secondary" className="text-xs">
                {tag}
              </Badge>
            ))}
          </div>

          {analysis.suggestions.length > 0 && (
          <div className="w-full">
            <h4 className="text-xs font-semibold mb-2">Optimization Suggestions</h4>
            <div className="grid grid-cols-2 gap-2">
              {analysis.suggestions.map((suggestion) => (
                <div key={suggestion.key} className="relative">
                  <Badge
                    variant="outline"
                    className="w-full cursor-pointer text-left"
                    onClick={() => setActiveSuggestion(
                      activeSuggestion === suggestion.key ? null : suggestion.key
                    )}
                  >
                    <suggestion.Icon className="h-3 w-3 mr-1 inline-block" />
                    {suggestion.title}
                  </Badge>
                  {activeSuggestion === suggestion.key && (
                    <div className="absolute z-10 mt-1 p-3 bg-background border rounded-lg shadow-lg w-[300px]">
                      <h4 className="font-bold mb-2">{suggestion.title}</h4>
                      <p className="text-sm mb-2">{suggestion.description}</p>
                      <div className="text-sm mb-2">
                        <span className="font-medium">Examples:</span>
                        <ul className="list-disc pl-4 mt-1">
                          {suggestion.examples.map((ex, i) => (
                            <li key={i}>{ex}</li>
                          ))}
                        </ul>
                      </div>
                      <p className="text-green-500 text-sm">{suggestion.benefits}</p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
        </CardFooter>
      )}
    </Card>
  );
}